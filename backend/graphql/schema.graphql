"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
# type Query {
#     "Find a single user by an identifying attribute."
#     user(
#       "Search by primary key."
#       id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

#       "Search by email address."
#       email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
#     ): User @find

#     "List multiple users."
#     users(
#       "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
#       name: String @all
#     ): [User!]! @paginate(defaultCount: 10)
# }

type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    password: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    notes: [Note] @hasMany
}

type Note {
  id: ID!

  title: String!

  text: String!

  user_id: User! @belongsTo

  created_at: DateTime!

  updated_at: DateTime!
}


type UserPaginator {
  paginatorInfo: PaginatorInfo!
  data: [User!]!
}

type Query {
  users: [User!]! @all

  user(id: ID @eq): User @find

  notes: [Note!]! @all

  getNoteById(id: ID! @eq): Note @find

  findNoteByUser(user: User): Note @find

  latestNote: Note!
}

type Mutation {
  # create user
  createUser(
    name: String! @rules(apply: ["required", "min:4"]),
    email: String! @rules(apply: ["email", "unique:users"]),
    password: String! @rules(apply: ["min:4"]) @hash
  ): User! @create

  # create note
  createNote(
    title: String! @rules(apply: ["required"]),
    text: String! @rules(apply: ["min:4"]),
    user_id: ID!
  ): Note! @create

  # delete note
  deleteNote(id: ID! @whereKey): Note! @delete

  #delete user
  deleteUser(id: ID! @whereKey): User! @delete

  # update note
  updateNote(
    id: ID! @whereKey
    title: String! @rules(apply: ["required"]),
    text: String! @rules(apply: ["required"]),
  ): Note @update
}